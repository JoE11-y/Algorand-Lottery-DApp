{"version":3,"sources":["utils/conversions.js","contracts/lottery_approval.teal","contracts/lottery_clear.teal","utils/lottery.js","components/ui/Notifications.jsx","components/ui/Identicon.jsx","components/Wallet.jsx","components/ui/Cover.jsx","components/ui/Loader.jsx","components/Lottery/PrevRounds.jsx","components/Lottery/BuyTicketForm.jsx","components/Lottery/NewLotteryForm.jsx","components/Lottery/Lottery.jsx","components/assets/img/balls.png","App.js","reportWebVitals.js","index.js","utils/constants.js"],"names":["utf8ToBase64String","utf8String","Buffer","from","toString","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","convertTime","secs","dateObj","Date","toLocaleDateString","weekday","year","month","day","toLocaleString","hour","minute","hour12","Lottery","appId","appAddress","creatorAddress","lottery_duration","lottery_start_time","lottery_end_time","total_no_of_players","total_no_of_tickets","ticket_price","prize_pool","status","winning_ticket","starter","ender","winner","next_lottery_fund","prev_app","user_id","user_no_of_tickets","user_is_winner","this","compileProgram","programSource","a","encoder","TextEncoder","programBytes","encode","algo","compile","do","compileResponse","Uint8Array","result","createLotteryAction","senderAddress","newLotteryData","prevLottery","console","log","getTransactionParams","params","ApprovalProgram","compiledApprovalProgram","ClearProgram","compiledClearProgram","duration","algosdk","encodeUint64","ticketPrice","note","appArgs","foreignApps","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","startLotteryAction","newLottery","startArg","fee","ALGORAND_MIN_TX_FEE","flatFee","amount","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","map","tx","joinLotteryAction","index","makeApplicationOptInTxnFromObject","buyTicketAction","lottery","noOfTickets","noOfTicketsArgs","Number","buyTicketArg","endLotteryAction","endArg","accounts","checkIfWinnerAction","checkArg","deleteLotteryAction","makeApplicationDeleteTxnFromObject","apid","getLotteriesAction","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","lotteries","transactions","transaction","getApplication","push","lookupApplications","includeAll","response","application","deleted","globalState","JSON","parse","stringify","dummyLottery","getApplicationAddress","creator","undefined","getField","value","uint","field","bytes","encodeAddress","Base64","toUint8Array","winner_reward","lookupAccountAppLocalStates","userInfo","appLocalState","localState","fieldName","State","find","state","key","checkStatus","lotteryEndTime","now","end","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","Identicon","size","rest","style","width","height","diameter","seed","parseInt","Wallet","name","symbol","disconnect","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","connect","coverImg","background","minHeight","maxWidth","src","alt","Button","Loader","role","PrevRounds","Lotteries","checkIfWinner","useState","loading","setLoading","setPosition","setLottery","userOptedIn","previousLottery","e","preventDefault","newPosition","nextLottery","rel","BuyTicketForm","open","onClose","buyTicket","setAmount","setTicketNumber","Modal","show","onHide","Header","closeButton","Title","Body","Form","onSubmit","FloatingLabel","controlId","label","Control","type","onChange","amounts","placeholder","Footer","disabled","NewLotteryForm","createNewLottery","setDuration","setTicketPrice","isFormFilled","useCallback","centered","fetchBalance","setLotteries","currentLottery","setCurrentLottery","openModal","open2","openModal2","getLottery","then","catch","error","finally","_","toast","startLottery","joinLottery","lotteryID","_lottery","endLottery","lotteryEnded","checkLotteryStatus","handleActions","useEffect","App","setAddress","setName","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","_balance","account","connectWallet","myAlgoConnect","_account","Container","fluid","Nav","window","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","config","algodClient","Algodv2","Indexer","MyAlgoConnect","lotteryNote","numLocalBytes","numGlobalBytes","zero_address"],"mappings":"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","file":"static/js/main.ba2d3320.chunk.js","sourcesContent":["import { ALGORAND_DECIMALS } from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n  return Buffer.from(base64String, \"base64\").toString(\"utf-8\");\n};\n\nexport const utf8ToBase64String = (utf8String) => {\n  return Buffer.from(utf8String, \"utf8\").toString(\"base64\");\n};\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n  if (!address) return;\n  return (\n    address.slice(0, 5) +\n    \"...\" +\n    address.slice(address.length - 5, address.length)\n  );\n};\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n  if (!num) return;\n  let bigNumber = new BigNumber(num);\n  return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n};\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n  if (!str) return;\n  let bigNumber = new BigNumber(str);\n  return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n};\n\nexport const convertTime = (secs) => {\n  if (secs === 0) {\n    return \"--\";\n  }\n\n  let dateObj = new Date(secs * 1000);\n\n  let date = dateObj.toLocaleDateString(\"en-us\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n  let time = dateObj.toLocaleString(\"en-us\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n  });\n  return date + \", \" + time;\n};\n","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l35\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l34\\ntxn OnCompletion\\nint OptIn\\n==\\nbnz main_l33\\ntxna ApplicationArgs 0\\nbyte \\\"start\\\"\\n==\\nbnz main_l26\\ntxna ApplicationArgs 0\\nbyte \\\"buy\\\"\\n==\\nbnz main_l22\\ntxna ApplicationArgs 0\\nbyte \\\"end\\\"\\n==\\nbnz main_l18\\ntxna ApplicationArgs 0\\nbyte \\\"check\\\"\\n==\\nbnz main_l10\\ntxna ApplicationArgs 0\\nbyte \\\"fund\\\"\\n==\\nbnz main_l9\\nerr\\nmain_l9:\\ntxn NumAccounts\\nint 1\\n==\\nbyte \\\"STATUS\\\"\\napp_global_get\\nint 2\\n==\\n&&\\nbyte \\\"POOL\\\"\\napp_global_get\\nint 1000000\\n>\\n&&\\nglobal CurrentApplicationAddress\\nbalance\\nint 1000000\\n>\\n&&\\nassert\\nbyte \\\"POOL\\\"\\napp_global_get\\nstore 20\\nbyte \\\"NEXTLOTTERY\\\"\\napp_global_get\\nstore 21\\ntxna Accounts 1\\nload 21\\ncallsub sendfunds_0\\nbyte \\\"POOL\\\"\\nload 20\\nload 21\\n-\\napp_global_put\\nbyte \\\"STATUS\\\"\\nint 3\\napp_global_put\\nint 1\\nreturn\\nmain_l10:\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\nglobal LatestTimestamp\\nbyte \\\"END\\\"\\napp_global_get\\n>\\n&&\\nbyte \\\"STATUS\\\"\\napp_global_get\\nint 2\\n==\\n&&\\ntxna Accounts 0\\nbyte \\\"ISWINNER\\\"\\napp_local_get\\nint 0\\n==\\n&&\\nassert\\ntxna Accounts 0\\nbyte \\\"TICKETCOUNT\\\"\\napp_local_get\\nstore 15\\nbyte \\\"WINNINGTICKET\\\"\\napp_global_get\\nstore 16\\nint 1\\nstore 18\\ntxna Accounts 0\\nbyte \\\"TICKETS\\\"\\napp_local_get\\nstore 13\\nint 0\\nstore 19\\nmain_l11:\\nload 19\\nload 15\\n<\\nbnz main_l15\\nmain_l12:\\nload 18\\nint 2\\n==\\nbnz main_l14\\nmain_l13:\\ntxna Accounts 0\\nbyte \\\"ISWINNER\\\"\\nload 18\\napp_local_put\\nint 1\\nreturn\\nmain_l14:\\nbyte \\\"WINNERREWARD\\\"\\napp_global_get\\nstore 17\\ntxna Accounts 0\\nload 17\\ncallsub sendfunds_0\\nbyte \\\"WINNER\\\"\\ntxn Sender\\napp_global_put\\nb main_l13\\nmain_l15:\\nload 13\\nload 19\\ngetbyte\\nstore 14\\nload 16\\nload 14\\n==\\nbnz main_l17\\nload 19\\nint 1\\n+\\nstore 19\\nb main_l11\\nmain_l17:\\nint 2\\nstore 18\\nb main_l12\\nmain_l18:\\ngtxn 0 RekeyTo\\nglobal ZeroAddress\\n==\\ngtxn 1 RekeyTo\\nglobal ZeroAddress\\n==\\n&&\\nassert\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\nbyte \\\"TICKETS\\\"\\napp_global_get\\nint 5\\n>=\\nbyte \\\"PLAYERS\\\"\\napp_global_get\\nint 2\\n>=\\n&&\\nint 0\\n==\\n||\\nglobal GroupSize\\nint 2\\n==\\n&&\\ntxn GroupIndex\\nint 0\\n==\\n&&\\ntxn NumAccounts\\nint 3\\n==\\n&&\\nglobal LatestTimestamp\\nbyte \\\"END\\\"\\napp_global_get\\n>\\n&&\\ngtxn 1 TypeEnum\\nint pay\\n==\\n&&\\ngtxn 1 Receiver\\nglobal CurrentApplicationAddress\\n==\\n&&\\ngtxn 1 CloseRemainderTo\\nglobal ZeroAddress\\n==\\n&&\\ngtxn 1 Amount\\nint 1000000\\n>=\\n&&\\nassert\\nbyte \\\"TICKETS\\\"\\napp_global_get\\nint 5\\n>=\\nbyte \\\"PLAYERS\\\"\\napp_global_get\\nint 2\\n>=\\n&&\\nbnz main_l21\\nbyte \\\"DURATION\\\"\\napp_global_get\\nstore 12\\nbyte \\\"END\\\"\\nglobal LatestTimestamp\\nload 12\\n+\\napp_global_put\\nmain_l20:\\nint 1\\nreturn\\nmain_l21:\\nbyte \\\"x\\\"\\nbyte \\\"a\\\"\\napp_global_get\\nbyte \\\"x\\\"\\napp_global_get\\n*\\nbyte \\\"c\\\"\\napp_global_get\\n+\\nbyte \\\"m\\\"\\napp_global_get\\n%\\napp_global_put\\nbyte \\\"WINNINGTICKET\\\"\\nbyte \\\"x\\\"\\napp_global_get\\nbyte \\\"TICKETS\\\"\\napp_global_get\\n%\\napp_global_put\\nbyte \\\"POOL\\\"\\napp_global_get\\nint 5\\n*\\nint 100\\n/\\nstore 10\\nbyte \\\"WINNERREWARD\\\"\\nbyte \\\"POOL\\\"\\napp_global_get\\nint 50\\n*\\nint 100\\n/\\napp_global_put\\nbyte \\\"NEXTLOTTERY\\\"\\nbyte \\\"POOL\\\"\\napp_global_get\\nint 35\\n*\\nint 100\\n/\\napp_global_put\\ntxna Accounts 1\\nload 10\\ncallsub sendfunds_0\\ntxna Accounts 2\\nload 10\\ncallsub sendfunds_0\\ntxna Accounts 3\\nload 10\\ncallsub sendfunds_0\\nbyte \\\"POOL\\\"\\napp_global_get\\nstore 11\\nbyte \\\"POOL\\\"\\nload 11\\nload 10\\nint 3\\n*\\n-\\napp_global_put\\nbyte \\\"STATUS\\\"\\nint 2\\napp_global_put\\nb main_l20\\nmain_l22:\\ngtxn 0 RekeyTo\\nglobal ZeroAddress\\n==\\ngtxn 1 RekeyTo\\nglobal ZeroAddress\\n==\\n&&\\nassert\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\nglobal GroupSize\\nint 2\\n==\\n&&\\ntxn GroupIndex\\nint 0\\n==\\n&&\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\nglobal LatestTimestamp\\nbyte \\\"END\\\"\\napp_global_get\\n<\\n&&\\nbyte \\\"STATUS\\\"\\napp_global_get\\nint 1\\n==\\n&&\\ntxna Accounts 0\\nbyte \\\"TICKETCOUNT\\\"\\napp_local_get\\nint 100\\n<=\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 100\\n<=\\n&&\\ngtxn 1 TypeEnum\\nint pay\\n==\\n&&\\ngtxn 1 Receiver\\nglobal CurrentApplicationAddress\\n==\\n&&\\ngtxn 1 CloseRemainderTo\\nglobal ZeroAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"PRICE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n*\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\nassert\\nbyte \\\"TICKETS\\\"\\napp_global_get\\nstore 5\\nload 5\\ntxna ApplicationArgs 1\\nbtoi\\n+\\nstore 6\\nload 5\\nstore 9\\nmain_l23:\\nload 9\\nload 6\\n<\\nbnz main_l25\\nbyte \\\"TICKETS\\\"\\nload 6\\napp_global_put\\nbyte \\\"POOL\\\"\\napp_global_get\\nstore 7\\nbyte \\\"POOL\\\"\\nload 7\\ngtxn 1 Amount\\n+\\napp_global_put\\nbyte \\\"x\\\"\\nbyte \\\"a\\\"\\napp_global_get\\nbyte \\\"x\\\"\\napp_global_get\\n*\\nbyte \\\"c\\\"\\napp_global_get\\n+\\nbyte \\\"m\\\"\\napp_global_get\\n%\\napp_global_put\\nint 1\\nreturn\\nmain_l25:\\ntxna Accounts 0\\nbyte \\\"TICKETCOUNT\\\"\\napp_local_get\\nstore 8\\ntxna Accounts 0\\nbyte \\\"TICKETS\\\"\\ntxna Accounts 0\\nbyte \\\"TICKETS\\\"\\napp_local_get\\nload 8\\nload 9\\nsetbyte\\napp_local_put\\ntxna Accounts 0\\nbyte \\\"TICKETCOUNT\\\"\\nload 8\\nint 1\\n+\\napp_local_put\\nload 9\\nint 1\\n+\\nstore 9\\nb main_l23\\nmain_l26:\\ngtxn 0 RekeyTo\\nglobal ZeroAddress\\n==\\ngtxn 1 RekeyTo\\nglobal ZeroAddress\\n==\\n&&\\nassert\\nglobal GroupSize\\nint 2\\n==\\ntxn GroupIndex\\nint 0\\n==\\n&&\\ngtxn 1 TypeEnum\\nint pay\\n==\\n&&\\ngtxn 1 Receiver\\nglobal CurrentApplicationAddress\\n==\\n&&\\ngtxn 1 CloseRemainderTo\\nglobal ZeroAddress\\n==\\n&&\\ngtxn 1 Amount\\nint 1000000\\n>=\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\ntxn NumApplications\\nint 1\\n==\\n&&\\nassert\\nbyte \\\"START\\\"\\nglobal LatestTimestamp\\napp_global_put\\nbyte \\\"END\\\"\\nglobal LatestTimestamp\\nbyte \\\"DURATION\\\"\\napp_global_get\\n+\\napp_global_put\\nbyte \\\"STARTER\\\"\\ntxn Sender\\napp_global_put\\nbyte \\\"STATUS\\\"\\nint 1\\napp_global_put\\nbyte \\\"PREVAPP\\\"\\napp_global_get\\nint 0\\n!=\\ntxna Applications 1\\nbyte \\\"PREVAPP\\\"\\napp_global_get\\n==\\n&&\\nbnz main_l28\\nmain_l27:\\nint 1\\nreturn\\nmain_l28:\\ntxn Fee\\nglobal MinTxnFee\\nint 2\\n*\\n>=\\nassert\\ntxna Applications 1\\nbyte \\\"x\\\"\\napp_global_get_ex\\nstore 2\\nstore 1\\nload 2\\nbnz main_l32\\nmain_l29:\\nitxn_begin\\nint appl\\nitxn_field TypeEnum\\ntxna Applications 1\\nitxn_field ApplicationID\\nint NoOp\\nitxn_field OnCompletion\\nbyte \\\"fund\\\"\\nitxn_field ApplicationArgs\\nglobal CurrentApplicationAddress\\nitxn_field Accounts\\nint 0\\nitxn_field Fee\\nitxn_submit\\ntxna Applications 1\\nbyte \\\"NEXTLOTTERY\\\"\\napp_global_get_ex\\nstore 4\\nstore 3\\nload 4\\nbnz main_l31\\nbyte \\\"POOL\\\"\\nint 0\\napp_global_put\\nb main_l27\\nmain_l31:\\nbyte \\\"POOL\\\"\\nload 3\\napp_global_put\\nb main_l27\\nmain_l32:\\nbyte \\\"x\\\"\\nload 1\\napp_global_put\\nb main_l29\\nmain_l33:\\nglobal LatestTimestamp\\nbyte \\\"END\\\"\\napp_global_get\\n<\\nbyte \\\"STATUS\\\"\\napp_global_get\\nint 1\\n==\\n&&\\nassert\\nbyte \\\"PLAYERS\\\"\\napp_global_get\\nstore 0\\ntxna Accounts 0\\nbyte \\\"ID\\\"\\nload 0\\nint 1\\n+\\napp_local_put\\nbyte \\\"PLAYERS\\\"\\nload 0\\nint 1\\n+\\napp_global_put\\ntxna Accounts 0\\nbyte \\\"TICKETCOUNT\\\"\\nint 0\\napp_local_put\\ntxna Accounts 0\\nbyte \\\"TICKETS\\\"\\nbyte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\napp_local_put\\ntxna Accounts 0\\nbyte \\\"ISWINNER\\\"\\nint 0\\napp_local_put\\nint 1\\nreturn\\nmain_l34:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nbyte \\\"STATUS\\\"\\napp_global_get\\nint 0\\n==\\nbyte \\\"STATUS\\\"\\napp_global_get\\nint 3\\n==\\n||\\n&&\\nreturn\\nmain_l35:\\ngtxn 0 RekeyTo\\nglobal ZeroAddress\\n==\\nassert\\ntxn Note\\nbyte \\\"algorandlottery:uv1\\\"\\n==\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\ntxna ApplicationArgs 0\\nbtoi\\nint 0\\n!=\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 0\\n>\\n&&\\ntxn NumApplications\\nint 1\\n==\\n&&\\nassert\\nbyte \\\"PREVAPP\\\"\\ntxna Applications 1\\napp_global_put\\nbyte \\\"DURATION\\\"\\ntxna ApplicationArgs 0\\nbtoi\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 1\\nbtoi\\napp_global_put\\nbyte \\\"PLAYERS\\\"\\nint 0\\napp_global_put\\nbyte \\\"TICKETS\\\"\\nint 0\\napp_global_put\\nbyte \\\"POOL\\\"\\nint 0\\napp_global_put\\nbyte \\\"STATUS\\\"\\nint 0\\napp_global_put\\nbyte \\\"a\\\"\\nint 75\\napp_global_put\\nbyte \\\"c\\\"\\nint 74\\napp_global_put\\nbyte \\\"m\\\"\\nint 65537\\napp_global_put\\nbyte \\\"x\\\"\\nint 28652\\napp_global_put\\nint 1\\nreturn\\n\\n// send_funds\\nsendfunds_0:\\nstore 23\\nstore 22\\nitxn_begin\\nint pay\\nitxn_field TypeEnum\\nload 22\\nitxn_field Receiver\\nload 23\\nitxn_field Amount\\nitxn_submit\\nretsub\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import algosdk from \"algosdk\";\nimport * as algo from \"./constants\";\nimport { Base64 } from \"js-base64\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport ApprovalProgram from \"!!raw-loader!../contracts/lottery_approval.teal\";\nimport ClearProgram from \"!!raw-loader!../contracts/lottery_clear.teal\";\nimport { utf8ToBase64String, stringToMicroAlgos } from \"./conversions\";\nimport { dummyLottery } from \"./constants\";\n\nexport class Lottery {\n  constructor(\n    appId,\n    appAddress,\n    creatorAddress,\n    lottery_duration,\n    lottery_start_time,\n    lottery_end_time,\n    total_no_of_players,\n    total_no_of_tickets,\n    ticket_price,\n    prize_pool,\n    status,\n    winning_ticket,\n    starter,\n    ender,\n    winner,\n    next_lottery_fund,\n    prev_app,\n    user_id,\n    user_no_of_tickets,\n    user_is_winner\n  ) {\n    this.appId = appId;\n    this.appAddress = appAddress;\n    this.creatorAddress = creatorAddress;\n    this.lottery_duration = lottery_duration;\n    this.lottery_start_time = lottery_start_time;\n    this.lottery_end_time = lottery_end_time;\n    this.total_no_of_players = total_no_of_players;\n    this.total_no_of_tickets = total_no_of_tickets;\n    this.ticket_price = ticket_price;\n    this.prize_pool = prize_pool;\n    this.status = status;\n    this.winning_ticket = winning_ticket;\n    this.starter = starter;\n    this.ender = ender;\n    this.winner = winner;\n    this.next_lottery_fund = next_lottery_fund;\n    this.prev_app = prev_app;\n    this.user_id = user_id;\n    this.user_no_of_tickets = user_no_of_tickets;\n    this.user_is_winner = user_is_winner;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algo.algodClient.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n// CREATE Lottery: ApplicationCreateTxn\nexport const createLotteryAction = async (\n  senderAddress,\n  newLotteryData,\n  prevLottery\n) => {\n  console.log(\"Creating new Lottery...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Compile Programs\n  const compiledApprovalProgram = await compileProgram(ApprovalProgram);\n  const compiledClearProgram = await compileProgram(ClearProgram);\n\n  // Build note to identify transaction later and required app args as Uint8Array\n  let duration = algosdk.encodeUint64(newLotteryData.duration);\n  let ticketPrice = algosdk.encodeUint64(newLotteryData.ticketPrice);\n  let note = new TextEncoder().encode(algo.lotteryNote);\n  let appArgs = [duration, ticketPrice];\n  let foreignApps = [prevLottery.appId];\n\n  console.log(foreignApps);\n\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: algo.numLocalInts,\n    numLocalByteSlices: algo.numLocalBytes,\n    numGlobalInts: algo.numGlobalInts,\n    numGlobalByteSlices: algo.numGlobalBytes,\n    note: note,\n    appArgs: appArgs,\n    foreignApps: foreignApps,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// START LOTTERY:\nexport const startLotteryAction = async (senderAddress, newLottery) => {\n  console.log(\"Starting Lottery...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let startArg = new TextEncoder().encode(\"start\");\n  let appArgs = [startArg];\n\n  let foreignApps = [newLottery.prev_app];\n\n  if (newLottery.prev_app !== 0) {\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE * 2;\n    params.flatFee = true;\n  }\n\n  let amount = stringToMicroAlgos(1);\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: newLottery.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n    foreignApps: foreignApps,\n  });\n\n  // Create PaymentTxn\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: senderAddress,\n    to: newLottery.appAddress,\n    amount: amount,\n    suggestedParams: params,\n  });\n\n  let txnArray = [appCallTxn, paymentTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algo.algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    tx.txId,\n    4\n  );\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// JOIN LOTTERY: OPT IN\nexport const joinLotteryAction = async (senderAddress, index) => {\n  console.log(\"Opting in......\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Create ApplicationOptIn Transaction\n  let txn = algosdk.makeApplicationOptInTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n  // display results\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  console.log(\"Opted-in to app-id:\", transactionResponse[\"txn\"][\"txn\"][\"apid\"]);\n};\n\n// BUY TICKETS: No op Action\nexport const buyTicketAction = async (senderAddress, lottery, noOfTickets) => {\n  console.log(\"Buying Tickets...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  let noOfTicketsArgs = algosdk.encodeUint64(Number(noOfTickets));\n\n  // Build required app args as Uint8Array\n  let buyTicketArg = new TextEncoder().encode(\"buy\");\n  let appArgs = [buyTicketArg, noOfTicketsArgs];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: lottery.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  // Create PaymentTxn\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: senderAddress,\n    to: lottery.appAddress,\n    amount: lottery.ticket_price * noOfTickets,\n    suggestedParams: params,\n  });\n\n  let txnArray = [appCallTxn, paymentTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algo.algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    tx.txId,\n    4\n  );\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n//END LOTTERY: No op call\nexport const endLotteryAction = async (senderAddress, lottery) => {\n  console.log(\"Ending Lottery...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  let amount = stringToMicroAlgos(1);\n\n  // Build required app args as Uint8Array\n  let endArg = new TextEncoder().encode(\"end\");\n  let appArgs = [endArg];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: lottery.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n    accounts: [lottery.starter, senderAddress, lottery.creatorAddress],\n  });\n\n  // Create PaymentTxn\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: senderAddress,\n    to: lottery.appAddress,\n    amount: amount,\n    suggestedParams: params,\n  });\n\n  let txnArray = [appCallTxn, paymentTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algo.algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    tx.txId,\n    4\n  );\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// CHECK IF WINNER: no_op_call\nexport const checkIfWinnerAction = async (senderAddress, lottery) => {\n  console.log(\"Running check...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let checkArg = new TextEncoder().encode(\"check\");\n  let appArgs = [checkArg];\n\n  // Create ApplicationCallTxn\n  let txn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: lottery.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE LOTTERY:\nexport const deleteLotteryAction = async (senderAddress, index) => {\n  console.log(\"Deleting application\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n// GET Lotteries: Using Indexer\nexport const getLotteriesAction = async (senderAddress) => {\n  console.log(\"Fetching Lotteries...\");\n  let note = new TextEncoder().encode(algo.lotteryNote);\n  let encodedNote = Buffer.from(note).toString(\"base64\");\n\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n  let transactionInfo = await algo.indexerClient\n    .searchForTransactions()\n    .notePrefix(encodedNote)\n    .txType(\"appl\")\n    .minRound(algo.minRound)\n    .do();\n\n  let lotteries = [];\n  for (const transaction of transactionInfo.transactions) {\n    let appId = transaction[\"created-application-index\"];\n    if (appId) {\n      // Step 2: Get each application by application id\n      let lottery = await getApplication(appId, senderAddress);\n      if (lottery) {\n        lotteries.push(lottery);\n      }\n    }\n  }\n  console.log(\"Lotteries Fetched...\");\n  return lotteries;\n};\n\n// Getting Lottery Data\nconst getApplication = async (appId, senderAddress) => {\n  try {\n    // 1. Get application by appId\n    let response = await algo.indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n    if (response.application.deleted) {\n      return null;\n    }\n\n    let globalState = response.application.params[\"global-state\"];\n    // 2. Parse fields of response and return lottery\n    let newLottery = JSON.parse(JSON.stringify(dummyLottery));\n\n    newLottery.appId = appId;\n\n    newLottery.appAddress = algosdk.getApplicationAddress(appId);\n\n    newLottery.creatorAddress = response.application.params.creator;\n\n    if (getField(\"DURATION\", globalState) !== undefined) {\n      newLottery.lottery_duration = getField(\n        \"DURATION\",\n        globalState\n      ).value.uint;\n    }\n\n    if (getField(\"START\", globalState) !== undefined) {\n      newLottery.lottery_start_time = getField(\"START\", globalState).value.uint;\n    }\n\n    if (getField(\"END\", globalState) !== undefined) {\n      newLottery.lottery_end_time = getField(\"END\", globalState).value.uint;\n    }\n\n    if (getField(\"PLAYERS\", globalState) !== undefined) {\n      newLottery.total_no_of_players = getField(\n        \"PLAYERS\",\n        globalState\n      ).value.uint;\n    }\n\n    if (getField(\"TICKETS\", globalState) !== undefined) {\n      newLottery.total_no_of_tickets = getField(\n        \"TICKETS\",\n        globalState\n      ).value.uint;\n    }\n\n    if (getField(\"PRICE\", globalState) !== undefined) {\n      newLottery.ticket_price = getField(\"PRICE\", globalState).value.uint;\n    }\n\n    if (getField(\"POOL\", globalState) !== undefined) {\n      newLottery.prize_pool = getField(\"POOL\", globalState).value.uint;\n    }\n\n    if (getField(\"STATUS\", globalState) !== undefined) {\n      newLottery.status = getField(\"STATUS\", globalState).value.uint;\n    }\n\n    if (getField(\"WINNINGTICKET\", globalState) !== undefined) {\n      newLottery.winning_ticket = getField(\n        \"WINNINGTICKET\",\n        globalState\n      ).value.uint;\n    }\n\n    if (getField(\"STARTER\", globalState) !== undefined) {\n      let field = getField(\"STARTER\", globalState).value.bytes;\n      if (field) {\n        newLottery.starter = algosdk.encodeAddress(Base64.toUint8Array(field));\n      }\n    }\n\n    if (getField(\"ENDER\", globalState) !== undefined) {\n      let field = getField(\"ENDER\", globalState).value.bytes;\n      if (field) {\n        newLottery.ender = algosdk.encodeAddress(Base64.toUint8Array(field));\n      }\n    }\n\n    if (getField(\"WINNER\", globalState) !== undefined) {\n      let field = getField(\"WINNER\", globalState).value.bytes;\n      if (field) {\n        newLottery.winner = algosdk.encodeAddress(Base64.toUint8Array(field));\n      }\n    }\n\n    if (getField(\"NEXTLOTTERY\", globalState) !== undefined) {\n      newLottery.next_lottery_fund = getField(\n        \"NEXTLOTTERY\",\n        globalState\n      ).value.uint;\n    }\n\n    if (getField(\"PREVAPP\", globalState) !== undefined) {\n      newLottery.prev_app = getField(\"PREVAPP\", globalState).value.uint;\n    }\n\n    if (getField(\"WINNERREWARD\", globalState) !== undefined) {\n      newLottery.winner_reward = getField(\n        \"WINNERREWARD\",\n        globalState\n      ).value.uint;\n    }\n    let userInfo = await algo.indexerClient\n      .lookupAccountAppLocalStates(senderAddress)\n      .do();\n\n    let appLocalState = userInfo[\"apps-local-states\"];\n    for (let i = 0; i < appLocalState.length; i++) {\n      if (appId === appLocalState[i][\"id\"]) {\n        let localState = appLocalState[i][\"key-value\"];\n        if (getField(\"ID\", localState) !== undefined) {\n          newLottery.user_id = getField(\"ID\", localState).value.uint;\n        }\n        if (getField(\"TICKETCOUNT\", localState) !== undefined) {\n          newLottery.user_no_of_tickets = getField(\n            \"TICKETCOUNT\",\n            localState\n          ).value.uint;\n        }\n        if (getField(\"ISWINNER\", localState) !== undefined) {\n          newLottery.user_is_winner = getField(\n            \"ISWINNER\",\n            localState\n          ).value.uint;\n        }\n      }\n    }\n    return newLottery;\n  } catch (err) {\n    return null;\n  }\n};\n\nconst getField = (fieldName, State) => {\n  return State.find((state) => {\n    return state.key === utf8ToBase64String(fieldName);\n  });\n};\n\nexport function checkStatus(status, lotteryEndTime) {\n  const now = new Date();\n  const end = new Date(lotteryEndTime * 1000);\n\n  if (status === 1 && lotteryEndTime !== 0 && now > end) {\n    return \"TIME EXHAUSTED, END LOTTERY TO GET LUCKY WINNER\";\n  } else {\n    switch (status) {\n      case 0: {\n        return \"START LOTTERY\";\n      }\n      case 1: {\n        return \"LOTTERY IS ACTIVE\";\n      }\n      case 2: {\n        return \"LOTTERY ENDED\";\n      }\n      case 3: {\n        return \"WINNERS AWARDED, START NEW LOTTERY\";\n      }\n      default: {\n        return \"CREATE NEW LOTTERY\";\n      }\n    }\n  }\n}\n","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({ size, address, ...rest }) => (\n  <div {...rest} style={{ width: `${size}px`, height: `${size}px` }}>\n    <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)} />\n  </div>\n);\n\nIdenticon.propTypes = {\n  size: PropTypes.number.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default Identicon;\n","import React from \"react\";\nimport { Dropdown, Spinner, Stack } from \"react-bootstrap\";\nimport { microAlgosToString, truncateAddress } from \"../utils/conversions\";\nimport Identicon from \"./ui/Identicon\";\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({ address, name, amount, symbol, disconnect }) => {\n  if (!address) {\n    return null;\n  }\n  return (\n    <>\n      <Dropdown>\n        <Dropdown.Toggle\n          variant=\"light\"\n          align=\"end\"\n          id=\"dropdown-basic\"\n          className=\"d-flex align-items-center border rounded-pill py-1\"\n        >\n          {amount ? (\n            <>\n              {microAlgosToString(amount)}\n              <span className=\"ms-1\"> {symbol}</span>\n            </>\n          ) : (\n            <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n          )}\n          <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu className=\"shadow-lg border-0\">\n          <Dropdown.Item\n            href={`https://testnet.algoexplorer.io/address/${address}`}\n            target=\"_blank\"\n          >\n            <Stack direction=\"horizontal\" gap={2}>\n              <i className=\"bi bi-person-circle fs-4\" />\n              <div className=\"d-flex flex-column\">\n                {name && <span className=\"font-monospace\">{name}</span>}\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </div>\n            </Stack>\n          </Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item\n            as=\"button\"\n            className=\"d-flex align-items-center\"\n            onClick={() => {\n              disconnect();\n            }}\n          >\n            <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n            Disconnect\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nWallet.propTypes = {\n  address: PropTypes.string,\n  name: PropTypes.string,\n  amount: PropTypes.number,\n  symbol: PropTypes.string,\n  disconnect: PropTypes.func,\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\n\nconst Cover = ({ name, connect, coverImg }) => {\n  return (\n    <div\n      className=\"d-flex justify-content-center flex-column text-center \"\n      style={{ background: \"#000\", minHeight: \"100vh\" }}\n    >\n      <div className=\"mt-auto text-light mb-5\">\n        <div\n          className=\" ratio ratio-1x1 mx-auto mb-2\"\n          style={{ maxWidth: \"320px\" }}\n        >\n          <img src={coverImg} alt=\"\" />\n        </div>\n        <h1 className=\"mt-auto text-light\">{name}</h1>\n        <p className=\"mt-auto text-light\">\n          Please connect your wallet to continue.\n        </p>\n        <Button\n          onClick={() => connect()}\n          variant=\"outline-light\"\n          className=\"rounded-pill px-3 mt-3\"\n        >\n          Connect Wallet\n        </Button>\n      </div>\n      <p className=\"mt-auto text-secondary\">Powered by NEAR</p>\n    </div>\n  );\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import React, { useState } from \"react\";\nimport Loader from \"../ui/Loader\";\nimport { Button } from \"react-bootstrap\";\nimport { convertTime, microAlgosToString } from \"../../utils/conversions\";\n\nconst PrevRounds = ({ Lotteries, checkIfWinner }) => {\n  const [loading, setLoading] = useState(false);\n\n  const [position, setPosition] = useState(Lotteries.length - 2);\n\n  const [lottery, setLottery] = useState(Lotteries[position]);\n\n  const userOptedIn = () => lottery.user_id !== 0;\n\n  const previousLottery = async (e) => {\n    setLoading(true);\n    e.preventDefault();\n    let newPosition = position - 1;\n    if (newPosition < 0) {\n      setLoading(false);\n      return;\n    }\n    setLottery(Lotteries[newPosition]);\n    setPosition(newPosition);\n    setLoading(false);\n  };\n\n  const nextLottery = async (e) => {\n    setLoading(true);\n    e.preventDefault();\n    let newPosition = position + 1;\n    if (newPosition >= Lotteries.length) {\n      setLoading(false);\n      return;\n    }\n    setLottery(Lotteries[newPosition]);\n    setPosition(newPosition);\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"tabs-container header\">\n          <div className=\"tab\">Lottery History</div>\n        </div>\n        <div className=\"lottery-container\">\n          {!loading ? (\n            <>\n              <div className=\"lottery-header\">\n                <div className=\"round-details\">\n                  <p>\n                    <strong>ID: </strong>{\" \"}\n                    <span className=\"round-num\">{lottery.appId}</span>\n                  </p>\n                  <div className=\"rounds-nav\">\n                    <a href=\"/#\" onClick={previousLottery} className=\"prev\">\n                      &#8592;\n                    </a>\n                    <a href=\"/#\" onClick={nextLottery} className=\"next\">\n                      &#8594;\n                    </a>\n                  </div>\n                </div>\n                <p>\n                  <strong>Drawn: </strong>{\" \"}\n                  {convertTime(lottery.lottery_end_time)}\n                </p>\n                <p>\n                  <strong>Winner: </strong>\n                  {lottery.user_is_winner === 0 && userOptedIn()\n                    ? \"Check if you're the winner \"\n                    : lottery.user_is_winner === 2\n                    ? \"Congratulations You won \"\n                    : lottery.user_is_winner === 1\n                    ? \"Sorry You Lost \"\n                    : \"\"}{\" \"}\n                  {(!userOptedIn() || lottery.user_is_winner !== 0) && (\n                    <a\n                      href={`https://testnet.algoexplorer.io/address/${lottery.winner}`}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      View Winner\n                    </a>\n                  )}\n                </p>\n              </div>\n              <div className=\"lottery-body\">\n                <p>\n                  <strong>Price Per Ticket: </strong>{\" \"}\n                  {microAlgosToString(lottery.ticket_price)} ALGO\n                </p>\n                <p>\n                  <strong>No of Tickets Sold: </strong>{\" \"}\n                  {lottery.total_no_of_tickets}\n                </p>\n                <p>\n                  <strong>Participants: </strong>\n                  {lottery.total_no_of_players}\n                </p>\n                <p>\n                  <strong>Prize: </strong>{\" \"}\n                  {Number(microAlgosToString(lottery.winner_reward))} NEAR\n                </p>\n                <p>\n                  <strong>Your Tickets: </strong>\n                  {lottery.user_no_of_tickets}\n                </p>\n              </div>\n              <div className=\"lottery-footer\">\n                {userOptedIn() && lottery.user_is_winner === 0 && (\n                  <Button\n                    variant=\"success\"\n                    className=\"check-if-winner\"\n                    onClick={() => checkIfWinner(lottery)}\n                  >\n                    Check if you won\n                  </Button>\n                )}\n              </div>\n            </>\n          ) : (\n            <Loader />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PrevRounds;\n","import React, { useState } from \"react\";\nimport { Modal, Button, Form, FloatingLabel } from \"react-bootstrap\";\nimport { microAlgosToString } from \"../../utils/conversions\";\n\nconst BuyTicketForm = ({ lottery, open, onClose, buyTicket }) => {\n  const [amount, setAmount] = useState(0);\n  const [noOfTickets, setTicketNumber] = useState(0);\n  const handleClose = () => {\n    onClose();\n  };\n\n  function onChange(e) {\n    const noOfTickets = e.target.value;\n    const amounts = microAlgosToString(lottery.ticket_price) * noOfTickets;\n    setTicketNumber(noOfTickets);\n    setAmount(amounts);\n  }\n\n  function onSubmit() {\n    if (!noOfTickets) {\n      return;\n    }\n    buyTicket(lottery, noOfTickets);\n\n    handleClose();\n  }\n\n  return (\n    <Modal show={open} onHide={onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Buy TIckets</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>Ticket Price: {microAlgosToString(lottery.ticket_price)} ALGO</p>\n        <p>You Pay: {amount} ALGO</p>\n        <Form onSubmit={onSubmit}>\n          <FloatingLabel\n            controlId=\"floatingNoOfTickets\"\n            label=\"Number Of Tickets\"\n            className=\"mb-3\"\n          >\n            <Form.Control\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              placeholder=\"Number of Tickets\"\n            />\n          </FloatingLabel>\n          <Modal.Footer>\n            <Button variant=\"success\" type=\"submit\" disabled={!noOfTickets}>\n              Pay Now\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default BuyTicketForm;\n","import React, { useCallback, useState } from \"react\";\nimport { Modal, Button, Form, FloatingLabel } from \"react-bootstrap\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst NewLotteryForm = ({ lotteries, open, onClose, createNewLottery }) => {\n  const [duration, setDuration] = useState(0);\n  const [ticketPrice, setTicketPrice] = useState(0);\n  const isFormFilled = useCallback(() => {\n    return duration > 0 && ticketPrice > 0;\n  }, [duration, ticketPrice]);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const formatDuration = (num) => {\n    return num * 60;\n  };\n\n  function onSubmit(e) {\n    e.preventDefault();\n    if (!isFormFilled()) {\n      return;\n    }\n    let length = lotteries.length;\n    let newLotteryData = { duration, ticketPrice };\n\n    // console.log(newLotteryData, lotteries[length - 1]);\n    createNewLottery(newLotteryData, lotteries[length - 1]);\n\n    setDuration(0);\n    setTicketPrice(0);\n    handleClose();\n  }\n\n  return (\n    <Modal show={open} onHide={onClose} centered>\n      <Modal.Header closeButton>\n        <Modal.Title>New Lottery</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={onSubmit}>\n          <FloatingLabel\n            controlId=\"inputPrice\"\n            label=\"Tickets Price\"\n            className=\"mb-3\"\n          >\n            <Form.Control\n              type=\"number\"\n              onChange={(e) => {\n                setTicketPrice(stringToMicroAlgos(e.target.value));\n              }}\n              placeholder=\"Tickets Price\"\n            />\n          </FloatingLabel>\n          <FloatingLabel\n            controlId=\"inputDuration\"\n            label=\"Duration in Minutes\"\n            className=\"mb-3\"\n          >\n            <Form.Control\n              type=\"number\"\n              onChange={(e) => {\n                setDuration(formatDuration(e.target.value));\n              }}\n              placeholder=\"Duration in Minutes\"\n            />\n          </FloatingLabel>\n          <Modal.Footer>\n            <Button variant=\"success\" disabled={!isFormFilled()} type=\"submit\">\n              Create New Lottery\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default NewLotteryForm;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { Button } from \"react-bootstrap\";\nimport PrevRounds from \"./PrevRounds\";\nimport BuyTicketForm from \"./BuyTicketForm\";\nimport NewLotteryForm from \"./NewLotteryForm\";\nimport Loader from \"../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../ui/Notifications\";\nimport * as lottery from \"../../utils/lottery\";\nimport { dummyLottery } from \"../../utils/constants\";\nimport { microAlgosToString, convertTime } from \"../../utils/conversions\";\n\nconst Lottery = ({ address, fetchBalance }) => {\n  const [loading, setLoading] = useState(false);\n  const [lotteries, setLotteries] = useState([]);\n  const [currentLottery, setCurrentLottery] = useState({});\n  const [open, openModal] = useState(false);\n  const [open2, openModal2] = useState(false);\n\n  const getLottery = useCallback(async () => {\n    setLoading(true);\n    lottery\n      .getLotteriesAction(address)\n      .then((lotteries) => {\n        if (lotteries.length > 0) {\n          setLotteries(lotteries);\n\n          // get last lottery in array and set to current lottery\n          let length = lotteries.length;\n          if (length > 0) {\n            let currentLottery = lotteries[lotteries.length - 1];\n            // console.log(currentLottery);\n            setCurrentLottery(currentLottery);\n          }\n        } else {\n          let lottery = [];\n          lottery.push(dummyLottery);\n          setLotteries(lottery);\n          setCurrentLottery(dummyLottery);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally((_) => {\n        setLoading(false);\n      });\n  }, [address]);\n\n  //  function to create Lottery\n  const createNewLottery = async (newLotteryData, prevLottery) => {\n    setLoading(true);\n    lottery\n      .createLotteryAction(address, newLotteryData, prevLottery)\n      .then(() => {\n        toast(<NotificationSuccess text=\"New Lottery created successfully\" />);\n        getLottery(address);\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to create new Lottery\" />);\n        setLoading(false);\n      });\n  };\n\n  //  function to start Lottery\n  const startLottery = async (newLottery) => {\n    setLoading(true);\n    lottery\n      .startLotteryAction(address, newLottery)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Lottery Started\" />);\n        getLottery(address);\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to start Lottery\" />);\n        setLoading(false);\n      });\n  };\n\n  //  function to join Lottery\n  const joinLottery = async (lotteryID) => {\n    setLoading(true);\n    lottery\n      .joinLotteryAction(address, lotteryID)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Lottery joined successfully\" />);\n        getLottery(address);\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to join Lottey\" />);\n        setLoading(false);\n      });\n  };\n\n  //  function to buy ticket\n  const buyTicket = async (_lottery, noOfTickets) => {\n    setLoading(true);\n    lottery\n      .buyTicketAction(address, _lottery, noOfTickets)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Tickets bought successfully\" />);\n        getLottery(address);\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to purchase Ticket\" />);\n        setLoading(false);\n      });\n  };\n\n  //  function to join Lottery\n  const endLottery = async (_lottery) => {\n    setLoading(true);\n    lottery\n      .endLotteryAction(address, _lottery)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Lottery closed\" />);\n        getLottery(address);\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to end Lottey\" />);\n        setLoading(false);\n      });\n  };\n\n  //  function to join Lottery\n  const checkIfWinner = async (_lottery) => {\n    setLoading(true);\n    lottery\n      .checkIfWinnerAction(address, _lottery)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Check completed\" />);\n        getLottery(address);\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Check failed\" />);\n        setLoading(false);\n      });\n  };\n\n  const deleteLottery = async (_lottery) => {\n    setLoading(true);\n    lottery\n      .deleteLotteryAction(address, _lottery.appId)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Listing deleted successfully\" />);\n        getLottery(address);\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to delete listing.\" />);\n        setLoading(false);\n      });\n  };\n\n  const lotteryEnded = () => {\n    let now = new Date();\n    let lotteryEndTime = new Date(currentLottery.lottery_end_time * 1000);\n    return now >= lotteryEndTime;\n  };\n\n  const checkLotteryStatus = (num) => currentLottery.status === num;\n\n  const userOptedIn = () => currentLottery.user_id !== 0;\n\n  // handle Actions of the button\n  const handleActions = async () => {\n    if (\n      currentLottery.appId === 0 ||\n      (lotteryEnded() && (checkLotteryStatus(2) || checkLotteryStatus(3)))\n    ) {\n      // create new lottery if(appId is 0) or when lottery status is ended or lottery fund sent\n      openModal2(true);\n    } else if (checkLotteryStatus(0) && currentLottery.lottery_duration !== 0) {\n      //start lottery when lottery status is 0 and lottery duration is more than 0\n      startLottery(currentLottery);\n      //deleteLottery(currentLottery);\n    } else if (checkLotteryStatus(1) && !lotteryEnded()) {\n      if (!userOptedIn()) {\n        joinLottery(currentLottery.appId);\n      } else {\n        openModal(true);\n      }\n    } else if (checkLotteryStatus(1) && lotteryEnded()) {\n      endLottery(currentLottery);\n    }\n  };\n\n  // handle message on button\n  // same checks as the handle action\n  const handleMessage = () => {\n    if (\n      currentLottery.appId === 0 ||\n      (lotteryEnded() && (checkLotteryStatus(2) || checkLotteryStatus(3)))\n    ) {\n      return \"Create New Lottery\";\n    } else if (checkLotteryStatus(0) && currentLottery.lottery_duration !== 0) {\n      return \"Start Lottery\";\n    } else if (checkLotteryStatus(1) && !lotteryEnded()) {\n      if (!userOptedIn()) {\n        return \"Join Lottery\";\n      } else {\n        return \"Buy Tickets\";\n      }\n    } else if (checkLotteryStatus(1) && lotteryEnded()) {\n      return \"End Lottery\";\n    }\n  };\n\n  useEffect(() => {\n    getLottery(address);\n  }, [address, getLottery]);\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          <div className=\"container\">\n            <div className=\"tabs-container header\">\n              {currentLottery.status !== 0 ? (\n                <div className=\"tab\">Current Lottery</div>\n              ) : (\n                <div className=\"tab\">Lottery DApp will be starting soon..</div>\n              )}\n            </div>\n\n            <div className=\"lottery-container\">\n              <div className=\"lottery-header\">\n                <div>\n                  <p>\n                    <strong>ID: </strong>{\" \"}\n                    <span className=\"round-num\">{currentLottery.appId}</span>\n                  </p>\n                  <p>\n                    <strong>Status: </strong>{\" \"}\n                    {lottery.checkStatus(\n                      currentLottery.status,\n                      currentLottery.lottery_end_time\n                    )}\n                  </p>\n                  <p>\n                    <strong>\n                      {checkLotteryStatus(0)\n                        ? \"Lottery Duration: \"\n                        : checkLotteryStatus(1)\n                        ? \"Lottery Ends: \"\n                        : \"Lottery Ended: \"}\n                    </strong>{\" \"}\n                    {checkLotteryStatus(0)\n                      ? `${currentLottery.lottery_duration / 60} Mins`\n                      : convertTime(currentLottery.lottery_end_time)}\n                  </p>\n                  {lotteryEnded() && checkLotteryStatus(2) && userOptedIn() && (\n                    <div className=\"winner\">\n                      <p>\n                        <strong>Winner: </strong>\n                        {currentLottery.user_is_winner === 0 && userOptedIn()\n                          ? \"Check if you're the winner \"\n                          : currentLottery.user_is_winner === 2\n                          ? \"Congratulations You won \"\n                          : currentLottery.user_is_winner === 1\n                          ? \"Sorry You Lost \"\n                          : \"\"}{\" \"}\n                        {(!userOptedIn() ||\n                          currentLottery.user_is_winner !== 0) && (\n                          <a\n                            href={`https://testnet.algoexplorer.io/address/${currentLottery.winner}`}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                          >\n                            View Winner\n                          </a>\n                        )}\n                      </p>\n                      {currentLottery.user_is_winner === 0 && (\n                        <div className=\"button-body\">\n                          {\" \"}\n                          <Button\n                            variant=\"success\"\n                            className=\"check-if-winner right\"\n                            onClick={() => checkIfWinner(currentLottery)}\n                          >\n                            Check\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"lottery-body\">\n                <p>\n                  <strong>Price Per Ticket: </strong>{\" \"}\n                  {currentLottery.ticket_price\n                    ? Number(microAlgosToString(currentLottery.ticket_price))\n                    : 0}{\" \"}\n                  ALGO\n                </p>\n                <p>\n                  <strong>No Of tickets Sold: </strong>\n                  {currentLottery.total_no_of_tickets}\n                </p>\n                <p>\n                  <strong>Participants: </strong>\n                  {currentLottery.total_no_of_players}\n                </p>\n                <p>\n                  <strong>Prize: </strong>{\" \"}\n                  {currentLottery.winner_reward\n                    ? Number(microAlgosToString(currentLottery.winner_reward))\n                    : currentLottery.prize_pool\n                    ? Number(microAlgosToString(currentLottery.prize_pool)) / 2\n                    : 0}{\" \"}\n                  ALGO\n                </p>\n                <p>\n                  <strong>Your Tickets: </strong>\n                  {currentLottery.user_no_of_tickets}\n                </p>\n              </div>\n              <div className=\"lottery-footer\">\n                <Button\n                  variant=\"success\"\n                  className=\"buy-lottery-btn\"\n                  onClick={() => handleActions()}\n                >\n                  {handleMessage()}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {lotteries.length > 1 && (\n            <PrevRounds Lotteries={lotteries} checkIfWinner={checkIfWinner} />\n          )}\n        </>\n      ) : (\n        <Loader />\n      )}\n\n      {open && (\n        <BuyTicketForm\n          lottery={currentLottery}\n          open={open}\n          onClose={() => openModal(false)}\n          buyTicket={buyTicket}\n        />\n      )}\n\n      {open2 && (\n        <NewLotteryForm\n          lotteries={lotteries}\n          open={open2}\n          onClose={() => openModal2(false)}\n          createNewLottery={createNewLottery}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Lottery;\n","export default __webpack_public_path__ + \"static/media/balls.d5e927bd.png\";","import React, { useState } from \"react\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport Cover from \"./components/ui/Cover\";\nimport Lottery from \"./components/Lottery/Lottery\";\nimport coverImg from \"./components/assets/img/balls.png\";\nimport \"./App.css\";\n\nconst App = function AppWrapper() {\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n    indexerClient\n      .lookupAccountByID(accountAddress)\n      .do()\n      .then((response) => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const connectWallet = async () => {\n    myAlgoConnect\n      .connect()\n      .then((accounts) => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setName(_account.name);\n        fetchBalance(_account.address);\n      })\n      .catch((error) => {\n        console.log(\"Could not connect to MyAlgo wallet\");\n        console.error(error);\n      });\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setName(null);\n    setBalance(null);\n    window.location.reload();\n  };\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <>\n          <Container fluid=\"md\" className=\"hero\">\n            <Nav className=\"justify-content-end pt-3 pb-5\">\n              <Nav.Item>\n                {/*display user wallet*/}\n                <Wallet\n                  address={address}\n                  name={name}\n                  amount={balance}\n                  disconnect={disconnect}\n                  symbol={\"ALGO\"}\n                />\n              </Nav.Item>\n            </Nav>\n            <div className=\"header\">\n              <p className=\"title light\">Algorand Lottery DApp</p>\n              <p className=\"subtitle light\">\n                A lottery platform built on the Algorand Blockchain 🔦\n              </p>\n            </div>\n            {/* display cover */}\n          </Container>\n          <Lottery address={address} fetchBalance={fetchBalance} />\n        </>\n      ) : (\n        // display cover if user is not connected\n        <Cover\n          name=\"Algorand Lottery DApp\"\n          connect={connectWallet}\n          coverImg={coverImg}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./css/style.css\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { Lottery } from \"./lottery\";\n\nconst config = {\n  algodToken: \"\",\n  algodServer: \"https://node.testnet.algoexplorerapi.io\",\n  algodPort: \"\",\n  indexerToken: \"\",\n  indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n  indexerPort: \"\",\n};\n\nexport const algodClient = new algosdk.Algodv2(\n  config.algodToken,\n  config.algodServer,\n  config.algodPort\n);\n\nexport const indexerClient = new algosdk.Indexer(\n  config.indexerToken,\n  config.indexerServer,\n  config.indexerPort\n);\n\nexport const zero_address =\n  \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ\";\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const lotteryNote = \"algorandlottery:uv1\";\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 3;\n// Local variables stored as Int: id, no_of_ticket, winnerstatus\nexport const numLocalBytes = 1;\n// Local variables stored as Bytes: Ticket array\n\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 16;\n// Global variables stored as Int: duration, starttime, endtime,\n// noOfPlayers, noOfTickets, ticketPrice, pricepool, lotterystatus,\n// winningTicket, winnerReward, next_lottery_fund, prev_app,\n// multiplier, increment, modulus, seed\n\nexport const numGlobalBytes = 3;\n// Global variables stored as Bytes: starter address, ender address, winner address\n\nexport const ALGORAND_DECIMALS = 6;\n\n/// values for dummy contract\nlet appId = 0;\nlet appAddress = zero_address;\nlet creatorAddress = zero_address;\nlet lottery_duration = 0;\nlet lottery_start_time = 0;\nlet lottery_end_time = 0;\nlet total_no_of_players = 0;\nlet total_no_of_tickets = 0;\nlet ticket_price = 0;\nlet prize_pool = 0;\nlet status = 100;\nlet winning_ticket = 0;\nlet starter = zero_address;\nlet ender = zero_address;\nlet winner = zero_address;\nlet next_lottery_fund = 0;\nlet prev_app = 0;\nlet winner_reward = 0;\nlet user_id = 0;\nlet user_no_of_tickets = 0;\nlet user_is_winner = 0;\n\nexport const dummyLottery = new Lottery(\n  appId,\n  appAddress,\n  creatorAddress,\n  lottery_duration,\n  lottery_start_time,\n  lottery_end_time,\n  total_no_of_players,\n  total_no_of_tickets,\n  ticket_price,\n  prize_pool,\n  status,\n  winning_ticket,\n  starter,\n  ender,\n  winner,\n  next_lottery_fund,\n  prev_app,\n  winner_reward,\n  user_id,\n  user_no_of_tickets,\n  user_is_winner\n);\n"],"sourceRoot":""}